rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) ?
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role : null;
    }
    
    function hasRole(role) {
      return isSignedIn() && getUserRole() == role;
    }
    
    function isAdmin() {
      return isSignedIn() && getUserRole() == 'admin';
    }
    
    function canCreateUserProfile() {
      return isSignedIn() && !exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    match /visitors/{visitorId} {
      // Admin and receptionist full access
      allow read, write: if isAdmin() || (isSignedIn() && getUserRole() == 'receptionist');

      // Visitor: can create own registration and read/update own records
      allow read, create: if true; // Allow public visitor registration
      allow update: if isSignedIn() && 
        (getUserRole() == 'visitor' || getUserRole() == 'guard' || getUserRole() == 'host');

      // Guard: can update checkIn/checkOut
      allow update: if isSignedIn() && getUserRole() == 'guard';
      
      // Host: can approve/reject visitors
      allow update: if isSignedIn() && getUserRole() == 'host';
    }

    match /users/{userId} {
      // Allow reading user documents for authenticated users
      allow read: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      
      // Allow user creation during registration (authenticated users can create their profile)
      allow create: if isSignedIn() && request.auth.uid == userId;
      
      // Allow profile creation for missing user documents during login
      allow create: if canCreateUserProfile() && request.auth.uid == userId;
      
      // Allow admin to create any user
      allow create: if isAdmin();
      
      // Allow users to update their own profile or admin to update any
      allow update: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      
      // Only admin can delete users
      allow delete: if isAdmin();
    }

    match /hosts/{hostId} {
      allow read, write: if isSignedIn();
    }

    match /visits/{visitId} {
      allow read, write: if isSignedIn();
    }
  }
}


